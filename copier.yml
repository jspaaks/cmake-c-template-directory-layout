_subdirectory: template

projectname:
    type: str
    help: What is the name of the new project? (Use [A-Za-z0-9_-.]+)
    default: calculator-project

producesexe:
    type: bool
    help: Does the project produce an executable?
    default: true

exename:
    type: str
    help: What is the name of the executable? (Use [A-Za-z0-9_-.]+)
    when: "{{ producesexe }}"
    default: calculator

produceslib:
    type: bool
    help: Does the project produce a library?
    default: true

libname:
    type: str
    help: What is the name of the library? (Use [A-Za-z0-9_-.]+)
    when: "{{ produceslib }}"
    default: operations

libpurpose:
    type: str
    help: What is the purpose of the library?
    choices:
      'To facilitate testing and to be consumed by third parties': both
      'To facilitate testing': testing-only
      'To be consumed by third parties': consumption-only
    when: "{{ produceslib }}"

nested:
    type: bool
    help: "Do you want to organize components into subdirectories under src/?"
    default: true
    when: "{{ producesexe or produceslib }}"

build_directory:
    type: str
    help: What should the build directory be called?
    choices:
      build: null
      built: null
      generated: null
    when: "{{ producesexe or produceslib }}"

add_external:
    type: bool
    help: Does the project have external dependencies?
    default: true
    when: "{{ producesexe or produceslib }}"

external_directory:
    type: str
    help: What should the directory that contains external dependencies be called?
    choices:
      external: null
      third_party: null
      lib: null
      submodules: null
      subprojects: null
    when: "{{ add_external and (producesexe or produceslib) }}"

add_assets:
    type: bool
    help: Does the project use assets like images, sound, fonts, etc?
    default: true
    when: "{{ producesexe or produceslib }}"

add_test:
    type: bool
    help: Does the project use tests?
    default: true
    when: "{{ produceslib }}"

add_cmake:
    type: bool
    help: Add a CMake build configuration?
    default: true
    when: "{{ producesexe or produceslib }}"

c_std:
    type: str
    help: What C standard does the project use?
    choices:
        C23: c_std_23
        C17: c_std_17
        C11: c_std_11
        C99: c_std_99
        C90: c_std_90
    when: "{{ add_cmake }}"

add_codeblocks:
    type: bool
    help: Add a Code::Blocks IDE configuration?
    default: true
    when: "{{ producesexe or produceslib }}"

add_clang_format:
    type: bool
    help: Add a clang-format configuration?
    default: true
    when: "{{ producesexe or produceslib }}"

add_answers:
    type: bool
    help: Do you want to include a copy of the answers you just provided as .copier-answers.yml?
    default: true
    when: "{{ producesexe or produceslib }}"

case:
    type: str
    help: "What is the value of 'case'?"
    default: "{%- if producesexe and produceslib -%}both{%- elif producesexe -%}exe{%- elif produceslib -%}lib{%- endif -%}-{%- if nested -%}nested{%- else -%}flat{%- endif -%}-{%- if add_external -%}with-external{%- else -%}wo-external{%- endif -%}"
    when: false

prepend_symbols:
    type: bool
    help: Prepend symbols with '{{ libname + "_" }}' to help avoid name collisions?
    default: "{{ produceslib and libpurpose in ['consumption-only', 'both'] }}"
    when: false

prepend_filenames:
    type : bool
    help: Prepend filenames with '{{ libname + "_" }}' to help avoid name collisions?
    default: "{{ prepend_symbols and not nested }}"
    when: false
